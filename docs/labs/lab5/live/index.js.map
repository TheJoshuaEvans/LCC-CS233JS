{"version":3,"file":"index.js","mappings":"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","sources":["webpack://lcc-cs233js/./docs/labs/lab5/js/memes.js","webpack://lcc-cs233js/webpack/bootstrap","webpack://lcc-cs233js/webpack/runtime/define property getters","webpack://lcc-cs233js/webpack/runtime/hasOwnProperty shorthand","webpack://lcc-cs233js/webpack/runtime/make namespace object","webpack://lcc-cs233js/./docs/labs/lab5/index.js"],"sourcesContent":["class Memes {\n  //* ================ HTML ELEMENTS ==================== */\n  /**\n   * @type {HTMLElement}\n   * Input element for the bottom text of the meme\n   */\n  $bottomTextInput;\n\n  /**\n   * @type {HTMLCanvasElement}\n   * The canvas element that displays the meme\n   */\n  $canvas;\n\n  /**\n   * @type {HTMLElement}\n   * The default image that is used to create the meme\n   */\n  $defaultImage;\n\n  /**\n   * @type {HTMLElement}\n   * The button element that allows the user to download the meme\n   */\n  $downloadButton;\n\n  /**\n   * @type {HTMLElement}\n   * The input element for the font size\n   */\n  $fontSizeInput;\n\n  /**\n   * @type {HTMLElement}\n   * The input element for the image\n   */\n  $imageInput;\n\n  /**\n   * @type {HTMLImageElement}\n   * The image that is used to create the meme\n   */\n  $image;\n\n  /**\n   * @type {HTMLElement}\n   * Input element for the top text of the meme\n   */\n  $topTextInput;\n\n  //* ================ PROPERTIES ==================== */\n  /**\n   * The context of the canvas element\n   */\n  canvasContext;\n\n  /**\n   * @type {number}\n   * The width of the window\n   */\n  deviceWidth;\n\n  //* ================ METHODS ==================== */\n  /**\n   * Add all the event listeners to the UI elements\n   */\n  addEventListeners = () => {\n    // Create the meme when the user types in the bottom text input\n    this.$bottomTextInput.addEventListener('keyup', this.createMeme);\n    this.$bottomTextInput.addEventListener('change', this.createMeme);\n    this.$downloadButton.addEventListener('click', this.downloadMeme);\n    this.$fontSizeInput.addEventListener('keyup', this.createMeme);\n    this.$fontSizeInput.addEventListener('change', this.createMeme);\n    this.$imageInput.addEventListener('change', this.loadImage);\n    this.$topTextInput.addEventListener('keyup', this.createMeme);\n    this.$topTextInput.addEventListener('change', this.createMeme);\n  };\n\n  /**\n   * Create the initial\n   */\n  createCanvas = () => {\n    this.$canvas.width = Math.min(1000, this.deviceWidth - 30);\n    this.$canvas.height = Math.min(1000, this.deviceWidth);\n  };\n\n  /**\n   * Create the meme by drawing the image and the text on the canvas\n   */\n  createMeme = () => {\n    this.canvasContext.clearRect(0, 0, this.$canvas.width, this.$canvas.height);\n    this.resizeImage(this.$image.width, this.$image.height);\n    this.canvasContext.drawImage(this.$image, 0, 0);\n\n    // Set the font size based on the canvas size IF a font size is not provided\n    const userFontSize = this.$fontSizeInput.value;\n    const fontSize = userFontSize ? userFontSize : ((this.$canvas.width + this.$canvas.height) / 2) * 4 / 100;\n    this.canvasContext.font = `${fontSize}pt sans-serif`;\n    this.canvasContext.textAlign = 'center';\n    this.canvasContext.textBaseline = 'top';\n    this.canvasContext.lineWidth = fontSize / 5;\n    this.canvasContext.strokeStyle = 'black';\n    this.canvasContext.fillStyle = 'white';\n\n    const bottomText = this.$bottomTextInput.value.toUpperCase();\n    this.canvasContext.strokeText(bottomText, this.$canvas.width / 2, (this.$canvas.height * 3) / 4);\n    this.canvasContext.fillText(bottomText, this.$canvas.width / 2, (this.$canvas.height * 3) / 4);\n\n    const topText = this.$topTextInput.value.toUpperCase();\n    this.canvasContext.strokeText(topText, this.$canvas.width / 2, (this.$canvas.height) / 4);\n    this.canvasContext.fillText(topText, this.$canvas.width / 2, (this.$canvas.height) / 4);\n  };\n\n  /**\n   * Triggers the download of the meme from the canvas\n   */\n  downloadMeme = () => {\n    const imageSource = this.$canvas.toDataURL('image/png');\n    this.$downloadButton.setAttribute('href', imageSource);\n    this.$downloadButton.setAttribute('download', 'meme.png');\n  };\n\n  /**\n   * Load an image from the file input into the canvas\n   */\n  loadImage = () => {\n    if (this.$imageInput.files && this.$imageInput.files[0]) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.$image = new Image();\n        this.$image.onload = () => {\n          this.createMeme();\n          this.downloadMeme();\n        };\n        this.$image.src = e.target.result;\n      };\n      reader.readAsDataURL(this.$imageInput.files[0]);\n    }\n  };\n\n  /**\n   * @param {number} canvasHeight\n   * @param {number} canvasWidth\n   */\n  resizeCanvas = (canvasHeight, canvasWidth) => {\n    let height = canvasHeight;\n    let width = canvasWidth;\n    let scale = 1;\n    while (height > Math.min(1000, this.deviceWidth - 30) && width > Math.min(1000, this.deviceWidth - 30)) {\n      height /= 2;\n      width /= 2;\n      scale /= 2;\n    }\n    this.$canvas.height = height;\n    this.$canvas.width = width;\n    this.canvasContext.scale(scale, scale);\n  };\n\n  /**\n   * Resize the image\n   */\n  resizeImage = () => {\n    const imageHeight = this.$image.height;\n    const imageWidth = this.$image.width;\n    this.resizeCanvas(imageHeight, imageWidth);\n  };\n\n  constructor() {\n    this.$bottomTextInput = document.querySelector('#bottomText');\n    this.$canvas = document.querySelector('#imgCanvas');\n    this.$defaultImage = document.querySelector('#defaultImage');\n    this.$downloadButton = document.querySelector('#downloadMeme');\n    this.$fontSizeInput = document.querySelector('#fontSize');\n    this.$imageInput = document.querySelector('#image');\n    this.$image = this.$defaultImage;\n    this.$topTextInput = document.querySelector('#topText');\n\n    this.canvasContext = this.$canvas.getContext('2d');\n    this.deviceWidth = window.innerWidth;\n\n    this.createCanvas();\n    this.createMeme();\n    this.addEventListeners();\n  }\n}\n\nexport default Memes;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Memes from './js/memes.js';\n\nwindow.onload = () => { window.memes = new Memes(); };\n"],"names":["Memes","_createClass","_this","_classCallCheck","_defineProperty","$bottomTextInput","addEventListener","createMeme","$downloadButton","downloadMeme","$fontSizeInput","$imageInput","loadImage","$topTextInput","$canvas","width","Math","min","deviceWidth","height","canvasContext","clearRect","resizeImage","$image","drawImage","userFontSize","value","fontSize","font","concat","textAlign","textBaseline","lineWidth","strokeStyle","fillStyle","bottomText","toUpperCase","strokeText","fillText","topText","imageSource","toDataURL","setAttribute","files","reader","FileReader","onload","e","Image","src","target","result","readAsDataURL","canvasHeight","canvasWidth","scale","imageHeight","imageWidth","resizeCanvas","document","querySelector","$defaultImage","getContext","window","innerWidth","createCanvas","addEventListeners","memes"],"sourceRoot":""}